/*
 * ForwardChainer.cxxtest
 *
 *  Created on: Sep 2, 2014
 *      Author: misgana
 */
#include <boost/range/algorithm/find.hpp>

#include <opencog/atomspace/AtomSpace.h>
#include <opencog/attentionbank/AttentionBank.h>
#include <opencog/guile/SchemeEval.h>

#include <opencog/rule-engine/forwardchainer/ForwardChainer.h>

#include <cxxtest/TestSuite.h>

using namespace opencog;

#define al _as.add_link
#define an _as.add_node

#define CHKERR \
   TSM_ASSERT("Caught scm error during eval", \
      (false == _eval.eval_error()));

class ForwardChainerUTest: public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;

public:
	ForwardChainerUTest() : _eval(&_as)
	{
#undef DEBUG
		logger().set_level(Logger::DEBUG);
		logger().set_timestamp_flag(false);
		logger().set_print_to_stdout_flag(true);

		string source_dir = string(PROJECT_SOURCE_DIR),
		       test_dir = source_dir + "/tests",
		       test_ure_dir = test_dir + "/rule-engine",
		       test_forwardchainer_dir = test_ure_dir + "/forwardchainer",
		       ure_dir = source_dir + "/opencog/scm/opencog/rule-engine";
		vector<string> load_paths = { source_dir, test_dir, test_ure_dir,
		                              test_forwardchainer_dir, ure_dir };
		for (string& p : load_paths) {
			string eval_str = string("(add-to-load-path \"") + p + string("\")");
			_eval.eval(eval_str);
		}

		_eval.eval("(use-modules (opencog))");
		_eval.eval("(use-modules (opencog rule-engine))");
		_eval.eval("(use-modules (opencog logger))");
		CHKERR;
	}
	~ForwardChainerUTest()
	{
		int rc = CxxTest::TestTracker::tracker().suiteFailed();
		_exit(rc); // XXX hack to avoid double-free in __run_exit_handlers
	}

	void setUp();
	void tearDown();

	void test_do_chain_deduction();
	void test_do_chain_animals();
	void test_select_rule();
	void test_unsatisfied_premise();
	void test_negation_conflict();
};

void ForwardChainerUTest::setUp()
{
	_as.clear();

	// Load the simple deduction rbs to test it
	string result; // to be able to read load errors
	result = _eval.eval("(load-from-path \"fc-deduction-config.scm\")");
	CHKERR;

	// Load the simple deduction + modus ponens rbs to test it
	result = _eval.eval("(load-from-path \"fc-config.scm\")");
	CHKERR;
}

void ForwardChainerUTest::tearDown()
{
}

void ForwardChainerUTest::test_do_chain_deduction()
{
	// Test simple deduction
	//
	//   InheritanceLink A B
	//   InheritanceLink B C
	//   |-
	//   InheritanceLink A C
	//
	Handle A = _eval.eval_h("(ConceptNode \"A\" (stv 1 1))"),
	       B = _eval.eval_h("(ConceptNode \"B\")"),
	       C = _eval.eval_h("(ConceptNode \"C\")"),
	       AB = _eval.eval_h("(InheritanceLink (stv 1 1)"
	                         "   (ConceptNode \"A\")"
	                         "   (ConceptNode \"B\"))"),
	       BC = _eval.eval_h("(InheritanceLink (stv 1 1)"
	                         "   (ConceptNode \"B\")"
	                         "   (ConceptNode \"C\"))");

	// Get the ConceptNode corresponding to the rule-based system to test
	Handle rbs = an(CONCEPT_NODE, "fc-deduction-rule-base");
	ForwardChainer fc(_as, rbs, AB);
	// Run forward chainer
	fc.do_chain();

	// Collect the results
	UnorderedHandleSet results = fc.get_chaining_result();

	// Check that AC is in the results
	Handle AC = _as.add_link(INHERITANCE_LINK, A, C);
	TS_ASSERT_DIFFERS(results.find(AC), results.end());
}

void ForwardChainerUTest::test_do_chain_animals()
{
	string result = _eval.eval("(load-from-path \"fc-animals-config.scm\")");
	logger().debug() << "result = " << result;
	_eval.eval("(load-from-path \"animals.scm\")");
	randGen().seed(0);

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfig::top_rbs_name);

	Handle Fritz = an(CONCEPT_NODE, "Fritz"),
		croaks = an(PREDICATE_NODE, "croaks"),
		green = an(CONCEPT_NODE, "green"),
		source = al(EVALUATION_LINK, croaks, Fritz),
		vardecl = Handle::UNDEFINED;

	ForwardChainer fc(_as, top_rbs, source, vardecl);
	fc.get_config().set_maximum_iterations(800);
	fc.do_chain();

	UnorderedHandleSet results = fc.get_chaining_result();
	Handle Fritz_green = al(INHERITANCE_LINK, Fritz, green);

	std::cout << "results = " << oc_to_string(results);

	// Check that AC is in the results
	TS_ASSERT_DIFFERS(results.find(Fritz_green), results.end());
}

void ForwardChainerUTest::test_select_rule(void)
{
	Handle h = _eval.eval_h("(InheritanceLink"
	                        "   (ConceptNode \"Cat\")"
	                        "   (ConceptNode \"Animal\"))");
	TS_ASSERT_DIFFERS(h, Handle::UNDEFINED);

	Handle rbs = _eval.eval_h("(ConceptNode \"fc-rule-base\")");
	ForwardChainer fc(_as, rbs, h);

	// Full unification
	Rule rule = fc.select_rule(h);
	TS_ASSERT(rule.is_valid());
}

/**
 * ForwardChainer shouldn't return a result when there is
 * unsatisfied premise.
 */
void ForwardChainerUTest::test_unsatisfied_premise(void)
{
	_eval.eval("(load-from-path \"fc-unsatisfied-premise.scm\")");

	Handle table = an(CONCEPT_NODE, "table"),
	       furniture = an(CONCEPT_NODE, "furniture"),
	       source = al(INHERITANCE_LINK, table, furniture),
	       vardecl = Handle::UNDEFINED,
	       top_rbs = _as.get_node(CONCEPT_NODE, "rule-base");

	ForwardChainer fc(_as, top_rbs, source, vardecl);
	fc.get_config().set_maximum_iterations(20);
	fc.do_chain();

	UnorderedHandleSet results = fc.get_chaining_result();
	TS_ASSERT_EQUALS(results.size(), 0);
}

/**
 * Do not imply the result that conflicts with existing negation facts.
 */
void ForwardChainerUTest::test_negation_conflict()
{
	_eval.eval("(load-from-path \"negation-conflict.scm\")");

	Handle vardecl = Handle::UNDEFINED;
	Handle rbs = _as.get_node(CONCEPT_NODE, "Einstein-rbs");
	Handle source = _eval.eval_h("source");

	ForwardChainer fc(_as, rbs, source, vardecl);
	fc.get_config().set_maximum_iterations(20);
	fc.do_chain();

	UnorderedHandleSet resultSet = fc.get_chaining_result();
	HandleSeq resultHandleSeq(resultSet.begin(), resultSet.end());
	Handle results = al(SET_LINK, resultHandleSeq);

	Handle American = an(CONCEPT_NODE, "American"),
	       German = an(CONCEPT_NODE, "German"),
	       cat = an(CONCEPT_NODE, "cat"),
	       dog = an(CONCEPT_NODE, "dog"),
	       keep = an(PREDICATE_NODE, "keep-pet"),
	       Gkeepcat = al(EVALUATION_LINK, keep, al(LIST_LINK, German, cat)),
	       Akeepdog = al(EVALUATION_LINK, keep, al(LIST_LINK, American, dog));

	Handle expected = al(SET_LINK, Gkeepcat, Akeepdog);

	logger().debug() << "results = " << results->to_string();
	logger().debug() << "expected = " << expected->to_string();

	TS_ASSERT_EQUALS(results, expected);
}
#undef al
#undef an
