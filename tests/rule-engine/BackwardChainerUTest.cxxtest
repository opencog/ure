/*
 * BackwardChainerUTest.cxxtest
 *
 *  Created on: Oct 20, 2014
 *      Authors: misgana
 ^             : Nil Geisweiller (2015-2016)
 */
#include <opencog/rule-engine/backwardchainer/BackwardChainer.h>
#include <opencog/rule-engine/backwardchainer/BackwardChainerPMCB.h>
#include <opencog/guile/SchemeEval.h>
#include <opencog/atomspace/AtomSpace.h>
#include <opencog/atoms/pattern/PatternLink.h>
#include <opencog/util/mt19937ar.h>

#include <cxxtest/TestSuite.h>

using namespace std;
using namespace opencog;

//#define DEBUG 1

#define al _as.add_link
#define an _as.add_node

class BackwardChainerUTest: public CxxTest::TestSuite
{
private:
	AtomSpace _as;
	SchemeEval _eval;
	BackwardChainer* _bc;

	void reset_bc();

public:
	BackwardChainerUTest() : _eval(&_as)
	{
		logger().set_level(Logger::INFO);
		logger().set_timestamp_flag(false);
		// logger().set_sync_flag(true);
		// logger().set_print_to_stdout_flag(true);
		randGen().seed(0);
	}

	void setUp();
	void tearDown();

	void test_select_rule_1();
	void test_select_rule_2();
	void test_select_rule_3();
	void test_deduction();
	void test_deduction_tv_query();
	void test_modus_ponens_tv_query();
	void test_conjunction_fuzzy_evaluation_tv_query();
	void test_conditional_instantiation_1();
	void test_conditional_instantiation_2();
	void test_conditional_instantiation_tv_query();
	void test_impossible_criminal();
	// TODO: re-enable as soon as it passes
	void test_criminal();
	// TODO: re-enable the following tests
	void test_induction();
	// TODO: think about fixing or removing the follow tests
	// void test_focus_set();
	// void test_virtual_no_grnd();
};

void BackwardChainerUTest::setUp()
{
	string cur_pp_dir = string(PROJECT_SOURCE_DIR),
		cur_p_dir = cur_pp_dir + "/tests",
		cur_dir = cur_p_dir + "/rule-engine";
	vector<string> load_paths = {cur_pp_dir, cur_p_dir, cur_dir};
	for (string& p : load_paths)
	{
		string eval_str = string("(add-to-load-path \"") + p + string("\")");
		_eval.eval(eval_str);
	}
	_eval.eval("(use-modules (opencog))");
	// _eval.eval("(use-modules (opencog rule-engine))");
}

void BackwardChainerUTest::tearDown()
{
	_as.clear();
}

void BackwardChainerUTest::reset_bc()
{
	delete(_bc);
	_as.clear();

	string eval_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-config.scm\")");

	// std::cout << "eval_result = " << eval_result << std::endl;

	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	_bc = new BackwardChainer(_as, top_rbs, Handle::UNDEFINED);
}

// Test select rule with a target with no variable
void BackwardChainerUTest::test_select_rule_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	reset_bc();

	Handle target_h = _eval.eval_h("(Inheritance"
	                               "   (Concept \"A\")"
	                               "   (Concept \"B\"))");
	BITNode target(target_h);

	Rule selected_rule = _bc->select_rule(target);

	TS_ASSERT_EQUALS(selected_rule.get_name(), "bc-deduction-rule");
}

// Test select rule with a target with variables
void BackwardChainerUTest::test_select_rule_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	reset_bc();

	Handle target_h = _eval.eval_h("(Inheritance"
	                               "   (Concept \"A\")"
	                               "   (Variable \"$X\"))");
	BITNode target(target_h);

	Rule selected_rule = _bc->select_rule(target);

	TS_ASSERT_EQUALS(selected_rule.get_name(), "bc-deduction-rule");
}

// Test select rule with a target with variables with the same name as
// the variable in the rule.
void BackwardChainerUTest::test_select_rule_3()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	reset_bc();

	Handle target_h = _eval.eval_h("(Variable \"$C\")"),
		vardecl_h = _eval.eval_h("(TypedVariable"
		                         "   (Variable \"$C\")"
		                         "   (Type \"InheritanceLink\"))");
	BITNode target(target_h);

	Rule selected_rule = _bc->select_rule(target, vardecl_h);

	TS_ASSERT_EQUALS(selected_rule.get_name(), "bc-deduction-rule");
}

void BackwardChainerUTest::test_deduction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-deduction-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-transitive-closure.scm\")");
	randGen().seed(0);

	// load 1 deduction rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	Handle X = an(VARIABLE_NODE, "$X"),
		D = an(CONCEPT_NODE, "D"),
		target = al(INHERITANCE_LINK, X, D);
		
	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(10);
	bc.do_chain();

	Handle results = bc.get_results(),
		A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		C = an(CONCEPT_NODE, "C"),
		CD = al(INHERITANCE_LINK, C, D),
		BD = al(INHERITANCE_LINK, B, D),
		AD = al(INHERITANCE_LINK, A, D),
		expected = al(SET_LINK, CD, BD, AD);
		
	logger().debug() << "results = " << results;
	logger().debug() << "expected = " << expected;

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_deduction_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-deduction-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-transitive-closure.scm\")");
	randGen().seed(0);

	// load 1 deduction rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	Handle target = _eval.eval_h("(Inheritance"
	                             "   (Concept \"A\")"
	                             "   (Concept \"D\"))");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(20);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_modus_ponens_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/modus-ponens-example.scm\")");
	randGen().seed(0);

	// load 1 deduction rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
	Handle target = an(PREDICATE_NODE, "T");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conjunction_fuzzy_evaluation_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/conjunction-fuzzy-evaluation-config.scm\")");
	logger().debug() << "result = " << result;
	result = _eval.eval("(load-from-path \"tests/rule-engine/simple-conjunction.scm\")");
	randGen().seed(0);

	// load 1 modus ponens rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle P = an(PREDICATE_NODE, "P"),
		Q = an(PREDICATE_NODE, "Q"),
		A = an(CONCEPT_NODE, "A"),
		B = an(CONCEPT_NODE, "B"),
		P_A = al(EVALUATION_LINK, P, A),
		Q_B = al(EVALUATION_LINK, Q, B),
		target = al(AND_LINK, P_A, Q_B);

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(2);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 0.4, 1e-6);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 0.2, 1e-6);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conditional_instantiation_1()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");

	logger().debug() << "result = " << result;

	result = _eval.eval("(load-from-path \"tests/rule-engine/bc-friends.scm\")");
	randGen().seed(0);

	// load 1 modus ponens rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle are_friends = an(PREDICATE_NODE, "are-friends"),
		john = an(CONCEPT_NODE, "John"),
		mary = an(CONCEPT_NODE, "Mary"),
		edward = an(CONCEPT_NODE, "Edward"),
		cyril = an(CONCEPT_NODE, "Cyril");
	auto friend_with_john = [&](const Handle& h) {
		return al(EVALUATION_LINK, are_friends, al(LIST_LINK, h, john));
	};
	Handle target_var = an(VARIABLE_NODE, "$who"),
		target = friend_with_john(target_var),
		vardecl = al(VARIABLE_LIST,
		             al(TYPED_VARIABLE_LINK,
		                target_var, an(TYPE_NODE, "ConceptNode")));

	BackwardChainer bc(_as, top_rbs, target, vardecl);
	bc.get_config().set_maximum_iterations(50);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK,
		              friend_with_john(mary),
		              friend_with_john(edward),
		              friend_with_john(cyril),
		              friend_with_john(john));

	logger().debug() << "results = " << results->toString();
	logger().debug() << "expected = " << expected->toString();

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conditional_instantiation_2()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string result = _eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");
	logger().debug() << "result = " << result;
	_eval.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
	randGen().seed(0);

	// load 1 modus ponens rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle green = an(CONCEPT_NODE, "green"),
		Fritz = an(CONCEPT_NODE, "Fritz"),
		what = an(VARIABLE_NODE, "$what"),
		target = al(INHERITANCE_LINK, what, green),
		concept = an(TYPE_NODE, "ConceptNode"),
		vardecl = al(TYPED_VARIABLE_LINK, what, concept);

	BackwardChainer bc(_as, top_rbs, target, vardecl);
	bc.get_config().set_maximum_iterations(40);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK, al(INHERITANCE_LINK, Fritz, green));

	logger().debug() << "results = " << results->toString();
	logger().debug() << "expected = " << expected->toString();

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_conditional_instantiation_tv_query()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/conditional-instantiation-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
	randGen().seed(500);

	// load modus ponens
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target =
	    _eval.eval_h("(InheritanceLink"
	                 "   (ConceptNode \"Fritz\")"
	                 "   (ConceptNode \"green\"))");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(40);
	bc.do_chain();

	TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, .1);
	TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, .1);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_impossible_criminal()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal-without-deduction-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal.scm\")");
	randGen().seed(0);

	// Load modus ponens rule
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target =
	    _eval.eval_h("(InheritanceLink"
	                 "   (VariableNode \"$who\")"
	                 "   (ConceptNode \"criminal\"))");
	Handle vardecl =
	    _eval.eval_h("(TypedVariable"
	                 "   (VariableNode \"$who\")"
	                 "   (Type \"ConceptNode\"))");
	Handle soln = _eval.eval_h("(ConceptNode \"West\")");

	// Should NOT be possible to find the solution without deduction
	// rule, as it won't be able to tell that missile@123 is a weapon.
	BackwardChainer bc(_as, top_rbs, target, vardecl);
	bc.get_config().set_maximum_iterations(200);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected = al(SET_LINK, HandleSeq());

	logger().debug() << "results = " << results;
	logger().debug() << "expected = " << expected;

	TS_ASSERT_EQUALS(results, expected);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_criminal()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal-config.scm\")");
	_eval.eval("(load-from-path \"tests/rule-engine/bc-criminal.scm\")");
	randGen().seed(0);

	// load modus ponens & deduction rules
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target_var = _eval.eval_h("(VariableNode \"$who\")");
	Handle target =
		_eval.eval_h("(InheritanceLink"
		             "   (VariableNode \"$who\")"
		             "   (ConceptNode \"criminal\"))");
	Handle vardecl =
	    _eval.eval_h("(TypedVariable"
	                 "   (VariableNode \"$who\")"
	                 "   (Type \"ConceptNode\"))");
	Handle soln = _eval.eval_h("(ConceptNode \"West\")");

	BackwardChainer bc(_as, top_rbs, target, vardecl);
	bc.get_config().set_maximum_iterations(200);
	bc.do_chain();

	Handle results = bc.get_results(),
		expected_target =  _eval.eval_h("(InheritanceLink"
		                                "   (ConceptNode \"West\")"
		                                "   (ConceptNode \"criminal\"))"),
		expected = al(SET_LINK, expected_target);

	logger().debug() << "results = " << oc_to_string(results);
	logger().debug() << "expected = " << oc_to_string(expected);

	// Disable that till fixed
	TS_ASSERT_EQUALS(results, expected);
	TS_ASSERT_LESS_THAN(0.9, expected_target->getTruthValue()->getMean());
	TS_ASSERT_LESS_THAN(0.9, expected_target->getTruthValue()->getConfidence());
	// TS_ASSERT(true);

	logger().debug("END TEST: %s", __FUNCTION__);
}

void BackwardChainerUTest::test_induction()
{
	logger().debug("BEGIN TEST: %s", __FUNCTION__);

	_as.clear();

	string load_bc_induction_config_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-induction-config.scm\")");

	string load_bc_induction_result =
		_eval.eval("(load-from-path \"tests/rule-engine/bc-induction.scm\")");

	randGen().seed(500);

	// load modus ponens & deduction rules
	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);

	Handle target = _eval.eval_h("bc-induction-target");

	BackwardChainer bc(_as, top_rbs, target);
	bc.get_config().set_maximum_iterations(100);
	bc.do_chain();

	// TODO: fixme, for that we need to support BIT expansion over meta rule
	// TS_ASSERT_DELTA(target->getTruthValue()->getMean(), 1, 1e-10);
	// TODO: determine the expected confidence, which depends on the
	// number of instances the induction is based on
	// TS_ASSERT_DELTA(target->getTruthValue()->getConfidence(), 1, 1e-10);
	TS_ASSERT(true);

	logger().debug("END TEST: %s", __FUNCTION__);
}

// void BackwardChainerUTest::test_focus_set()
// {
// 	logger().debug("BEGIN TEST: %s", __FUNCTION__);

// 	_as.clear();

// 	_eval.eval("(load-from-path \"tests/rule-engine/bc-modus-ponens-config.scm\")");
// 	_eval.eval("(load-from-path \"tests/rule-engine/bc-animals.scm\")");
// 	randGen().seed(0);

// 	// load 1 modus ponens rule
// 	Handle top_rbs = _as.get_node(CONCEPT_NODE, UREConfigReader::top_rbs_name);
// 	BackwardChainer bc(_as, top_rbs);

// 	Handle target_var = _eval.eval_h("(VariableNode \"$what\")");
// 	Handle target =
// 	        _eval.eval_h("(InheritanceLink"
// 	                     "   (VariableNode \"$what\")"
// 	                     "   (ConceptNode \"green\"))");
// 	Handle focus_set =
// 	        _eval.eval_h("(SetLink"
// 	                     " (InheritanceLink"
// 	                     "   (ConceptNode \"tree\")"
// 	                     "   (ConceptNode \"plant\"))"
// 	                     " (ImplicationLink (stv 1.0 1.0)"
// 	                     "   (InheritanceLink"
// 	                     "     (VariableNode \"$P\")"
// 	                     "     (ConceptNode \"plant\")"
// 	                     "   )"
// 	                     "   (InheritanceLink"
// 	                     "     (VariableNode \"$P\")"
// 	                     "     (ConceptNode \"green\")"
// 	                     "   )"
// 	                     " )"
// 	                     ")");
// 	Handle soln1 = _eval.eval_h("(ConceptNode \"tree\")");

// 	// should not be able to find this solution outside the focus set
// 	Handle soln2 = _eval.eval_h("(ConceptNode \"Fritz\")");

// 	bc.set_target(target, focus_set);
// 	bc.get_config().set_maximum_iterations(300);
// 	bc.do_chain();

// 	HandleMultimap results = bc.get_chaining_result();

// 	TS_ASSERT_EQUALS(results[target_var].size(), 2);
// 	TS_ASSERT_EQUALS(results[target_var].count(soln1), 1);
// 	TS_ASSERT_EQUALS(results[target_var].count(soln2), 0);

// 	logger().debug("END TEST: %s", __FUNCTION__);
// }

// /**
//  * Test the following pattern using the BackwardChainerPMCB
//  *
//  * (AndLink
//  *   (InheritanceLink
//  *     (ConceptNode "A")
//  *     (VariableNode "$X")
//  *   )
//  *   (InheritanceLink
//  *     (VariableNode "$X")
//  *     (VariableNode "$Y")
//  *   )
//  *   (NotLink
//  *     (IdenticalLink
//  *       (ConceptNode "A")
//  *       (VariableNode "$Y")
//  *     )
//  *   )
//  * )
//  *
//  * on the the following data:
//  *
//  * (InheritanceLink
//  *  (ConceptNode "A")
//  *   (ConceptNode "B")
//  * )/
// *
//  * (InheritanceLink
//  *   (ConceptNode "A")
//  *   (VariableNode "$X")
//  * )
//  *
//  * (InheritanceLink
//  *   (ConceptNode "B")
//  *   (ConceptNode "C")
//  * )
//  *
//  */
// void BackwardChainerUTest::test_virtual_no_grnd()
// {
// 	logger().debug("BEGIN TEST: %s", __FUNCTION__);

// 	_as.clear();

// 	// Define the pattern to match against.
// 	Handle
// 		A = an(CONCEPT_NODE, "A"),
// 		B = an(CONCEPT_NODE, "B"),
// 		C = an(CONCEPT_NODE, "C"),
// 		X = an(VARIABLE_NODE, "$X"),
// 		Y = an(VARIABLE_NODE, "$Y"),
// 		AX = al(INHERITANCE_LINK, A, X),
// 		XY = al(INHERITANCE_LINK, X, Y),
// 		NotIdAY = al(NOT_LINK, al(IDENTICAL_LINK, A, Y)),
// 		AB = al(INHERITANCE_LINK, A, B),
// 		BC = al(INHERITANCE_LINK, B, C),
// 		Concept = an(TYPE_NODE, "ConceptNode"),
// 		vardecl = al(VARIABLE_LIST,
// 		             al(TYPED_VARIABLE_LINK, X, Concept),
// 		             al(TYPED_VARIABLE_LINK, Y, Concept)),
// 		body = al(AND_LINK, AX, XY, NotIdAY),
// 		pattern = al(PATTERN_LINK, vardecl, body);

// 	PatternLinkPtr sl(PatternLinkCast(pattern));
// 	BackwardChainerPMCB pmcb(&_as, VariableListCast(vardecl), true);
// 	sl->satisfy(pmcb);

// 	const HandleMapSeq& var_solns = pmcb.get_var_list();
// 	const HandleMapSeq& pred_solns = pmcb.get_pred_list();

// 	TS_ASSERT_EQUALS(var_solns.size(), 1);
// 	TS_ASSERT_EQUALS(var_solns.front().size(), 2);
// 	TS_ASSERT_EQUALS(var_solns.front().at(X), B);
// 	TS_ASSERT_EQUALS(var_solns.front().at(Y), C);

// 	TS_ASSERT_EQUALS(pred_solns.size(), 1);
// 	TS_ASSERT_EQUALS(pred_solns.front().size(), 2);
// 	TS_ASSERT_EQUALS(pred_solns.front().at(AX), AB);
// 	TS_ASSERT_EQUALS(pred_solns.front().at(XY), BC);

// 	logger().debug("END TEST: %s", __FUNCTION__);
// }

#undef al
#undef an
